###########################################################
# combine the 5 dataset
j = 1
Firings = c()
Left = c()
Right = c()
Date = c()
for (ses in 1:5){
n.trials=length(session[[ses]]$spks)
n.neurons=dim(session[[ses]]$spks[[1]])[1]
for(i in 1:n.trials){
firingrate=sum(session[[ses]]$spks[[i]])/n.neurons/t
Firings[j] = firingrate
Left[j] = session[[ses]]$contrast_left[i]
Right[j] = session[[ses]]$contrast_right[i]
Date[j] = session[[ses]]$date_exp
j = j + 1
}
}
data = data.frame(matrix(ncol=4, nrow=j-1))
colnames(data) = c('Firings', 'Left', 'Right','Date')
data["Firings"] = Firings
data["Left"] = Left
data["Right"] = Right
data["Date"] = Date
data$Left = as.factor(data$Left)
data$Right = as.factor(data$Right)
data$Date = as.factor(data$Date)
head(data)
model1 = aov(Firings ~ Left * Right, data = data)
library(lme4)
lmer(Firings~Left*Right+(1|Date), data=data)
model = lmer(Firings~Left*Right+(1|Date), data=data)
summary(model)
data$Left = as.factor(data$Left)
data$Right = as.factor(data$Right)
data$Date = as.factor(data$Date)
head(data)
model = lmer(Firings~Left*Right+(1|Date), data=data)
summary(model)
anova(model)
anova(model)
aov(model)
model1 = lmer(Firings~Left+Right+(1|Date), data=data)
model2 = lmer(Firings~Left*Right+(1|Date), data=data)
anova(model1, model2)
Anova(model2)
Anova(model2, type=3)
install.packages("lmerTest")
library(lmerTest)
model = lmerTest::lmer(Firings~Left*Right+(1|Date), data=data)
anova(model)
for(i in 1:5){
session[[i]]=readRDS(paste('./session',i,'.rds',sep=''))
print(session[[i]]$mouse_name)
print(session[[i]]$date_exp)
}
session[[3]]$feedback_type[id]
session[[3]]$contrast_left[id]
session[[3]]$contrast_right[id]
length(session[[3]]$time[[id]])
session[[3]]$time[[id]]
dim(session[[3]]$spks[[id]])
table(data)
data
head(data)
summary(data)
table(data$Left, data$Right)
o = data$Left
e = data$Right
w = data$Firings
interaction.plot(e,o,w,xlab="Right",ylab="Firings", main="Interaction")
model1 = lmer(Firings~Left*Right, data=data)
model2 = lmer(Firings~Left*Right+(1|Date), data=data)
Anova(model2, type=3)
aov(model1, model2)
model = lmerTest::lmer(Firings~Left*Right+(1|Date), data=data)
anova(model)
# fanova
library(fda)
install.packages("fda")
# fanova
library(fda)
gait.data.frame <- as.data.frame(gait)
x.gait <- vector("list", 2)
x.gait[[1]] <- as.matrix(gait.data.frame[, 1:39])
x.gait
x.gait[[2]] <- as.matrix(gait.data.frame[, 40:78])
# vector of group labels
group.label.gait <- rep(1:3, each = 13)
group.label.gait
# the tests based on a basis function representation with default parameters
set.seed(123)
fmanova1 <- fmanova.ptbfr(x.gait, group.label.gait)
?fmanova
fmanova1 <- fanova.ptbfr(x.gait, group.label.gait)
install.package('fdANOVA')
install.packages('fdANOVA')
library(fdANOVA)
fmanova1 <- fmanova.ptbfr(x.gait, group.label.gait)
summary(fmanova1)
gait.data.frame <- as.data.frame(gait)
x.gait <- as.matrix(gait.data.frame[, 1:39])
# vector of group labels
group.label.gait <- rep(1:3, each = 13)
# vector of group labels
group.label.gait
set.seed(123)
fanova1 <- fanova.tests(x.gait, group.label.gait)
model = lmerTest::lmer(Firings~Left*Right+(1|Date), data=data)
anova(model)
model
summary(model)
model = lmerTest::lmer(Firings~Left*Right, data=data)
anova(model)
summary(model)
model = lmerTest::lmer(Firings~Left*Right+(1|Date), data=data)
anova(model)
summary(model)
# Exploratory analysis
data
# Exploratory analysis
head(data)
library(ggplot2)
df <- data.frame(Spike = rnorm(100),
Right = factor(sample(letters[1:4], 100, replace = TRUE)),
Left = factor(sample(LETTERS[1:4], 100, replace = TRUE)))
# Plot with fixed left and varying right
ggplot(df, aes(x = Spike, y = Right, color = Right)) +
facet_wrap(~ Left, ncol = 2) +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Right")
# Plot with fixed left and varying right
ggplot(df, aes(x = Spike, y = Right, color = Right)) +
facet_wrap(~ Left, ncol = 2) +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Right")
dev.off()
# Plot with fixed left and varying right
ggplot(df, aes(x = Spike, y = Right, color = Right)) +
facet_wrap(~ Left, ncol = 2) +
geom_smooth(method = "loess", se = FALSE) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Right")
head(df)
# Sample data
set.seed(123)
df <- data.frame(Spike = 1:100,
Right = factor(sample(letters[1:4], 100, replace = TRUE)),
Left = factor(sample(LETTERS[1:4], 100, replace = TRUE)),
Value = rnorm(100))
# Plot with fixed Left and varying Right
ggplot(df, aes(x = Spike, y = Value, color = Right)) +
geom_smooth(se = FALSE, method = "loess") +
facet_wrap(~ Left, ncol = 2) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Value")
ss
length(data$Firings)
df <- data.frame(Spike = 1:length(data$Firings),
Right = data$Right,
Left = data$Left,
Value = data$Firings)
# Plot with fixed Left and varying Right
ggplot(df, aes(x = Spike, y = Value, color = Right)) +
geom_smooth(se = FALSE, method = "loess") +
facet_wrap(~ Left, ncol = 2) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Value")
df <- data.frame(Spike = 1:100,
Right = factor(sample(letters[1:4], 100, replace = TRUE)),
Left = factor(sample(LETTERS[1:4], 100, replace = TRUE)),
Value = rnorm(100))
# Plot with fixed Left and varying Right
ggplot(df, aes(x = Spike, y = Value, color = Right)) +
geom_smooth(se = FALSE, method = "loess") +
facet_wrap(~ Left, ncol = 2) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Value")
df <- data.frame(Spike = 1:100,
Right = factor(sample(letters[1:4], 100, replace = TRUE)),
Left = factor(sample(LETTERS[1:4], 100, replace = TRUE)),
Value = rnorm(100))
# Plot with fixed Left and varying Right
ggplot(df, aes(x = Spike, y = Value, color = Right)) +
geom_smooth(se = FALSE, method = "loess") +
facet_wrap(~ Left, ncol = 2) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Value")
df <- data.frame(Spike = 1:100,
Right = data$Right,
Left = data$Left,
Value = data$Firings)
# Plot with fixed Left and varying Right
ggplot(df, aes(x = Spike, y = Value, color = Right)) +
geom_smooth(se = FALSE, method = "loess") +
facet_wrap(~ Left, ncol = 2) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Value")
df <- data.frame(Spike = 1:100,
Right = data$Right,
Left = data$Left,
Value = data$Firings)
# Plot with fixed Left and varying Right
ggplot(df, aes(x = Spike, y = Value, color = Right)) +
geom_smooth(se = FALSE, method = "loess") +
facet_wrap(~ Left, ncol = 2) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Value")
dim(df)
length(data$Firings)
data$Firings
df <- data.frame(Spike = c(runif(20, 0, 5), runif(30, 5, 10), runif(40, 10, 15), runif(10, 15, 20)),
Right = factor(sample(letters[1:4], 100, replace = TRUE)),
Left = factor(sample(LETTERS[1:4], 100, replace = TRUE)),
Value = rnorm(100))
# Subset data with fixed Right of "a"
df_a <- subset(df, Right == "a")
# Plot with fixed Right and varying Left
ggplot(df_a, aes(x = Spike, y = Value, color = Left)) +
geom_smooth(se = FALSE, method = "loess") +
facet_wrap(~ Right, ncol = 2) +
labs(title = "Smoothing lines with fixed Right and varying Left",
x = "Spike", y = "Value")
df <- data.frame(Spike = 1:1196,
Right = data$Right,
Left = data$Left,
Value = data$Firings)
# Plot with fixed Left and varying Right
ggplot(df, aes(x = Spike, y = Value, color = Right)) +
geom_smooth(se = FALSE, method = "loess") +
facet_wrap(~ Left, ncol = 2) +
labs(title = "Smoothing lines with fixed Left and varying Right",
x = "Spike", y = "Value")
# Sample data
set.seed(123)
df <- data.frame(Spike = c(runif(20, 0, 5), runif(30, 5, 10), runif(40, 10, 15), runif(10, 15, 20)),
Right = factor(sample(letters[1:4], 100, replace = TRUE)),
Left = factor(sample(LETTERS[1:4], 100, replace = TRUE)),
Value = rnorm(100))
df
# Plot with fixed Right and varying Left
ggplot(df, aes(x = Spike, y = Value)) +
geom_smooth(se = FALSE, method = "loess") +
facet_grid(Left ~ Right) +
labs(title = "Smoothing lines with fixed Right and varying Left",
x = "Spike", y = "Value")
df <- data.frame(Spike = c(1:20, 1:30, 1:40, 1:10),
Right = factor(rep(letters[1:4], times = c(20, 30, 40, 10))),
Left = factor(rep(LETTERS[1:4], each = 25)),
Value = rnorm(100))
df
# List of Spike values for each combination of (Right, Left)
spike_list <- tapply(df$Spike, list(df$Right, df$Left), unique)
# Plot with fixed Right and varying Left
ggplot(df, aes(x = Spike, y = Value)) +
geom_smooth(se = FALSE, method = "loess") +
facet_grid(Left ~ Right) +
scale_x_continuous(breaks = c(1, 10, 20, 30, 40),
labels = c(spike_list[[1]][1], spike_list[[2]][1], spike_list[[3]][1], spike_list[[4]][1])) +
labs(title = "Smoothing lines with fixed Right and varying Left",
x = "Spike", y = "Value")
library(dpylr)
library(dplyr)
df = data %>% groupby(Left, Right)
df = data %>% group_by(Left, Right)
df
df_filtered <- df %>% filter(Right == '1')
# Plot 4 smoothing curves for each combination of Left
ggplot(df_filtered, aes(y = Firings, group = Left, color = Left)) +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Spike", y = "Value", title = "Smoothing curves for each combination of Left") +
theme_minimal()
df <- data.frame(Right = factor(rep(1:4, times = c(20, 30, 40, 10))),
Left = factor(rep(LETTERS[1:4], each = 25)),
Value = rnorm(100))
# Group by Left and Right
grouped_df <- df %>% group_by(Left, Right) %>% arrange(Left, Right)
# Plot 4 smoothing curves for each combination of Right and Left
ggplot(grouped_df, aes(x = seq_along(Value), y = Value, group = Left, color = Left)) +
geom_smooth(method = "loess", se = FALSE) +
facet_grid(rows = vars(Right)) +
labs(x = "Index", y = "Value", title = "Smoothing curves for each combination of Right and Left") +
theme_minimal()
df
df = data %>% group_by(Left, Right)
df
df_filtered <- df %>% filter(Right == '1')
df_filtered
df <- data.frame(Right = factor(rep(1:4, times = c(20, 30, 40, 10))),
Left = factor(rep(c(0, 0.25, 0.5, 1), each = 25)),
Value = rnorm(100))
# Group by Left and Right
grouped_df <- df %>% group_by(Left, Right) %>% arrange(Left, Right)
# Filter data for each combination of Right and Left
filtered_df <- grouped_df %>% filter(Left == 0 & Right == 1 |
Left == 0.25 & Right == 1 |
Left == 0.5 & Right == 1 |
Left == 1 & Right == 1)
# Plot smoothing curves for each combination of Right and Left in one plot
ggplot(filtered_df, aes(x = seq_along(Value), y = Value, group = Left, color = Left)) +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Index", y = "Value", title = "Smoothing curves for each combination of Right and Left") +
theme_minimal()
filtered_df
df <- data.frame(Right = factor(rep(1:4, times = c(20, 30, 40, 10))),
Left = factor(rep(c(0, 0.25, 0.5, 1), each = 25)),
Value = rnorm(100))
# Group by Left and Right
grouped_df <- df %>% group_by(Left, Right) %>% arrange(Left, Right)
# Filter data for Right = 1 and different levels of Left
filtered_df <- grouped_df %>% filter(Right == 1 & Left %in% c(0, 0.25, 0.5, 1))
# Plot smoothing curves for each level of Left
ggplot(filtered_df, aes(x = seq_along(Value), y = Value, group = Left, color = Left)) +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Index", y = "Value", title = "Smoothing curves for each level of Left with fixed Right = 1") +
theme_minimal()
df <- data.frame(Right = factor(rep(1:4, times = c(20, 30, 40, 10))),
Left = factor(rep(c(0, 0.25, 0.5, 1), each = 25)),
Value = rnorm(100))
df
# Group by Left and Right
grouped_df <- data %>% group_by(Left, Right) %>% arrange(Left, Right)
# Filter data for Right = 1 and different levels of Left
filtered_df <- grouped_df %>% filter(Right == 1 & Left %in% c(0, 0.25, 0.5, 1))
# Plot smoothing curves for each level of Left
ggplot(filtered_df, aes(x = seq_along(Value), y = Value, group = Left, color = Left)) +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Index", y = "Value", title = "Smoothing curves for each level of Left with fixed Right = 1") +
theme_minimal()
# Plot smoothing curves for each level of Left
ggplot(filtered_df, aes(x = seq_along(Firings), y = Firings, group = Left, color = Left)) +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Index", y = "Value", title = "Smoothing curves for each level of Left with fixed Right = 1") +
theme_minimal()
# Filter data for Right = 1 and different levels of Left
filtered_df <- grouped_df %>% filter(Right == 0 & Left %in% c(0, 0.25, 0.5, 1))
# Plot smoothing curves for each level of Left
ggplot(filtered_df, aes(x = seq_along(Firings), y = Firings, group = Left, color = Left)) +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Index", y = "Value", title = "Smoothing curves for each level of Left with fixed Right = 1") +
theme_minimal()
n.trials=length(session[[ID]]$spks)
n.neurons=dim(session[[ID]]$spks[[1]])[1]
n.neurons
gait.data.frame <- as.data.frame(gait)
x.gait <- as.matrix(gait.data.frame[, 1:39])
# vector of group labels
group.label.gait <- rep(1:3, each = 13)
fanova1 <- fanova.tests(x.gait, group.label.gait)
summary(fanova1)
x.gait
head(x.gait)
gait.data.frame <- as.data.frame(gait)
x.gait <- vector("list", 2)
x.gait[[1]] <- as.matrix(gait.data.frame[, 1:39])
x.gait[[2]] <- as.matrix(gait.data.frame[, 40:78])
x.gait
# vector of group labels
group.label.gait <- rep(1:3, each = 13)
group.label.gait
fmanova1 <- fmanova.ptbfr(x.gait, group.label.gait)
summary(fmanova1)
for(i in 1:5){
session[[i]]=readRDS(paste('./session',i,'.rds',sep=''))
print(session[[i]]$mouse_name)
print(session[[i]]$date_exp)
}
library(haven)
library(dplyr)
library(qwraps2)
library(ggplot2)
library(tidyr)
library(ggpubr)
library(plotly)
library(car)
library(stats)
library(mice)
library(VIM)
library(lattice)
# summary
our_summary =
list("Firing rate" =
list("min"       = ~ min(Firings, na.rm=TRUE),
"median"    = ~ median(Firings, na.rm=TRUE),
"max"       = ~ max(Firings, na.rm=TRUE),
"lower quatile" = ~ quantile(Firings, 0.25, na.rm=TRUE),
"upper quantile" = ~ quantile(Firings, 0.75, na.rm=TRUE),
"NA values' number" = ~ sum(is.na(Firings))),
"Left contrast" =
list("Left Contrast" = ~ class(Left),
"NA values' number" = ~ sum(is.na(Left))),
"Right Constrast" =
list("Left Contrast" = ~ class(Left),
"NA values' number" = ~ sum(is.na(g1schid)),
))
# summary
our_summary =
list("Firing rate" =
list("min"       = ~ min(Firings, na.rm=TRUE),
"median"    = ~ median(Firings, na.rm=TRUE),
"max"       = ~ max(Firings, na.rm=TRUE),
"lower quatile" = ~ quantile(Firings, 0.25, na.rm=TRUE),
"upper quantile" = ~ quantile(Firings, 0.75, na.rm=TRUE),
"NA values' number" = ~ sum(is.na(Firings))),
"Left contrast" =
list("Left Contrast" = ~ class(Left),
"NA values' number" = ~ sum(is.na(Left))),
"Right Constrast" =
list("Left Contrast" = ~ class(Left),
"NA values' number" = ~ sum(is.na(g1schid))),
)
# summary
our_summary =
list("Firing rate" =
list("min"       = ~ min(Firings, na.rm=TRUE),
"median"    = ~ median(Firings, na.rm=TRUE),
"max"       = ~ max(Firings, na.rm=TRUE),
"lower quatile" = ~ quantile(Firings, 0.25, na.rm=TRUE),
"upper quantile" = ~ quantile(Firings, 0.75, na.rm=TRUE),
"NA values' number" = ~ sum(is.na(Firings))),
"Left contrast" =
list("Left Contrast" = ~ class(Left),
"NA values' number" = ~ sum(is.na(Left))),
"Right Constrast" =
list("Left Contrast" = ~ class(Right),
"NA values' number" = ~ sum(is.na(Right))),
)
#################################################
our_summary1 =
list("Scaled Math Score" =
list("min"       = ~ min(g1tmathss, na.rm=TRUE),
"median"    = ~ median(g1tmathss, na.rm=TRUE),
"max"       = ~ max(g1tmathss, na.rm=TRUE),
"lower quatile" = ~ quantile(g1tmathss, 0.25, na.rm=TRUE),
"upper quantile" = ~ quantile(g1tmathss, 0.75, na.rm=TRUE),
"NA values' number" = ~ sum(is.na(g1tmathss))),
"Class Type" =
list("Types" = ~ class(g1classtype),
"NA values' number" = ~ sum(is.na(g1classtype))),
"School ID" =
list("NA values' number" = ~ sum(is.na(g1schid))
))
our_summary1 =
list("Scaled Math Score" =
list("min"       = ~ min(g1tmathss, na.rm=TRUE),
"median"    = ~ median(g1tmathss, na.rm=TRUE),
"max"       = ~ max(g1tmathss, na.rm=TRUE),
"lower quatile" = ~ quantile(g1tmathss, 0.25, na.rm=TRUE),
"upper quantile" = ~ quantile(g1tmathss, 0.75, na.rm=TRUE),
"NA values' number" = ~ sum(is.na(g1tmathss))),
"Class Type" =
list("Types" = ~ class(g1classtype),
"NA values' number" = ~ sum(is.na(g1classtype))),
"School ID" =
list("NA values' number" = ~ sum(is.na(g1schid))
))
our_summary1 =
list("Scaled Math Score" =
list("min"       = ~ min(Firings, na.rm=TRUE),
"median"    = ~ median(g1tmathss, na.rm=TRUE),
"max"       = ~ max(g1tmathss, na.rm=TRUE),
"lower quatile" = ~ quantile(g1tmathss, 0.25, na.rm=TRUE),
"upper quantile" = ~ quantile(g1tmathss, 0.75, na.rm=TRUE),
"NA values' number" = ~ sum(is.na(g1tmathss))),
"Class Type" =
list("Types" = ~ class(g1classtype),
"NA values' number" = ~ sum(is.na(g1classtype))),
"School ID" =
list("NA values' number" = ~ sum(is.na(g1schid))
))
# summary
our_summary =
list("Firing rate" =
list("min"       = ~ min(Firings, na.rm=TRUE),
"median"    = ~ median(Firings, na.rm=TRUE),
"max"       = ~ max(Firings, na.rm=TRUE),
"lower quatile" = ~ quantile(Firings, 0.25, na.rm=TRUE),
"upper quantile" = ~ quantile(Firings, 0.75, na.rm=TRUE),
"NA values' number" = ~ sum(is.na(Firings))),
"Left contrast" =
list("Left Contrast" = ~ class(Left),
"NA values' number" = ~ sum(is.na(Left))),
"Right Constrast" =
list("Left Contrast" = ~ class(Right),
"NA values' number" = ~ sum(is.na(Right)))
)
undo.mice.dat = data%>%dplyr::select(Firings, Left, Right, )
whole = summary_table(undo.mice.dat, our_summary)
whole
data$Date
# summary
our_summary =
list("Firing rate" =
list("min"       = ~ min(Firings, na.rm=TRUE),
"median"    = ~ median(Firings, na.rm=TRUE),
"max"       = ~ max(Firings, na.rm=TRUE),
"lower quatile" = ~ quantile(Firings, 0.25, na.rm=TRUE),
"upper quantile" = ~ quantile(Firings, 0.75, na.rm=TRUE),
"NA values' number" = ~ sum(is.na(Firings))),
"Left contrast" =
list("Left Contrast" = ~ class(Left),
"NA values' number" = ~ sum(is.na(Left))),
"Right Constrast" =
list("Left Contrast" = ~ class(Right),
"NA values' number" = ~ sum(is.na(Right)))
)
undo.mice.dat = data%>%dplyr::select(Firings, Left, Right, )
whole = summary_table(undo.mice.dat, our_summary)
whole
